# Dependencias
FROM node:21-alpine3.19 as deps

WORKDIR /usr/src/app

COPY package.json ./
COPY package-lock.json ./

RUN npm install


# Builder - construye la aplicación
FROM node:21-alpine3.19 as build

WORKDIR /usr/src/app

# Copiar de deps, los módulos de node
COPY --from=deps /usr/src/app/node_modules ./node_modules

# Copiar todo el código fuente de la aplicación
COPY . .

# Si se tuviesen tests se tendría este run para correrlos
# RUN npm run test
RUN npm run build

# Se instalan solo las dependencias necesarias en producción
RUN npm ci -f --only=production && npm cache clean --force

RUN npx prisma generate


# Crear la imagen final de docker
FROM node:21-alpine3.19 as prod

WORKDIR /usr/src/app

# Se copian los node_modules del stage del build.
# Por que del build? porque en este stage se instalan solo las dependencias necesarias en producción
COPY --from=build /usr/src/app/node_modules ./node_modules

# Copiar la carpeta de distribución
COPY --from=build /usr/src/app/dist ./dist
COPY --from=build /usr/src/app/prisma ./prisma

ENV NODE_ENV=production

# Es conveniente crear un usuario para ejecutar lo que sigue
# Porque si no se hace, el usuario por defecto es el "root" y este tiene todos los permisos
# Mientras que si se crea un nuevo usuario este solo tiene los permisos básicos.
USER node

EXPOSE 3000

CMD [ "node", "dist/main.js" ]